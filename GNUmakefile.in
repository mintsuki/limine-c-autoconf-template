# Nuke built-in rules and variables.
override MAKEFLAGS += -rR

# Convenience macro to reliably declare user overridable variables.
define DEFAULT_VAR =
    ifeq ($(origin $1),default)
        override $(1) := $(2)
    endif
    ifeq ($(origin $1),undefined)
        override $(1) := $(2)
    endif
endef

# Import some autoconf variables as make variables.
# Those beginning with DEFAULT_ are user overridable.
override KARCH := @KARCH@
override SRCDIR := @SRCDIR@
override PACKAGE_VERSION := @PACKAGE_VERSION@
override PACKAGE_TARNAME := @PACKAGE_TARNAME@
override OUTPUT := bin/$(PACKAGE_TARNAME)
override TOOLCHAIN_FILE := @TOOLCHAIN_FILE@
override WERROR_FLAG := @WERROR_FLAG@
override DEFAULT_KCFLAGS := @KCFLAGS@
$(eval $(call DEFAULT_VAR,KCFLAGS,$(DEFAULT_KCFLAGS)))
override DEFAULT_KCPPFLAGS := @KCPPFLAGS@
$(eval $(call DEFAULT_VAR,KCPPFLAGS,$(DEFAULT_KCPPFLAGS)))
#ifeq ($(KARCH),x86_64)
#    override DEFAULT_KNASMFLAGS := @KNASMFLAGS@
#    $(eval $(call DEFAULT_VAR,KNASMFLAGS,$(DEFAULT_KNASMFLAGS)))
#endif
override DEFAULT_KLDFLAGS := @KLDFLAGS@
$(eval $(call DEFAULT_VAR,KLDFLAGS,$(DEFAULT_KLDFLAGS)))
override MKDIR_P := @MKDIR_P@
override INSTALL := @INSTALL@
override INSTALL_DATA := @INSTALL_DATA@
override prefix := @prefix@
override datarootdir := @datarootdir@

# Macros to make our build system still work from within paths with spaces
# or other special characters.
override SPACE := $(subst ,, )
MKESCAPE = $(subst $(SPACE),\ ,$(1))
SHESCAPE = $(subst ','\'',$(1))

# Include toolchain file.
include $(call MKESCAPE,$(TOOLCHAIN_FILE))

# Internal C flags that should not be changed by the user.
override KCFLAGS += \
    -Wall \
    -Wextra \
    $(WERROR_FLAG) \
    -std=gnu11 \
    -nostdinc \
    -ffreestanding \
    -ffunction-sections \
    -fdata-sections \
    -fno-stack-protector \
    -fno-stack-check \
    -fno-lto \
    -fPIE

# Internal C preprocessor flags that should not be changed by the user.
override KCPPFLAGS := \
    -isystem '$(call SHESCAPE,$(SRCDIR))/freestanding-headers' \
    -I'$(call SHESCAPE,$(SRCDIR))/src' \
    $(KCPPFLAGS) \
    -MMD \
    -MP

#ifeq ($(KARCH),x86_64)
#    # Internal nasm flags that should not be changed by the user.
#    override KNASMFLAGS += \
#        -Wall \
#        $(WERROR_FLAG)
#endif

# Set archtecture specific variables (and check that the architecture is supported).
ifeq ($(KARCH),x86_64)
    override KCFLAGS += \
        -m64 \
        -march=x86-64 \
        -mno-80387 \
        -mno-mmx \
        -mno-sse \
        -mno-sse2 \
        -mno-red-zone
    override KLDFLAGS += \
        -m elf_x86_64
#    override KNASMFLAGS += \
#        -f elf64
else
    $(error Architecture $(KARCH) not supported)
endif

# Internal linker flags that should not be changed by the user.
override KLDFLAGS += \
    -nostdlib \
    -pie \
    -z text \
    -z max-page-size=0x1000 \
    -gc-sections \
    -T '$(call SHESCAPE,$(SRCDIR)/linker-$(KARCH).ld)'

# Use "find" to glob all *.c, *.S, and *.asm files in the tree and obtain the
# object and header dependency file names.
override CFILES := $(shell cd '$(call SHESCAPE,$(SRCDIR))/src' && find -L * -type f -name '*.c' | LC_ALL=C sort)
override ASFILES := $(shell cd '$(call SHESCAPE,$(SRCDIR))/src' && find -L * -type f -name '*.S' | LC_ALL=C sort)
override OBJ := $(addprefix obj/,$(CFILES:.c=.c.o) $(ASFILES:.S=.S.o))
#ifeq ($(KARCH),x86_64)
#    override NASMFILES := $(shell cd '$(call SHESCAPE,$(SRCDIR))/src' && find -L * -type f -name '*.asm' | LC_ALL=C sort)
#    override OBJ += $(addprefix obj/,$(NASMFILES:.asm=.asm.o))
#endif
override HEADER_DEPS := $(addprefix obj/,$(CFILES:.c=.c.d) $(ASFILES:.S=.S.d))

# Default target.
.PHONY: all
all: $(OUTPUT)

# Link rules for the final kernel executable.
$(OUTPUT): GNUmakefile $(call MKESCAPE,$(SRCDIR))/linker-$(KARCH).ld $(OBJ)
	$(MKDIR_P) "$$(dirname $@)"
	$(KLD) $(OBJ) $(KLDFLAGS) -o $@
	printf '\003' | dd of=$@ bs=1 count=1 seek=16 conv=notrunc 2>/dev/null

# Include header dependencies.
-include $(HEADER_DEPS)

# Compilation rules for *.c files.
obj/%.c.o: $(call MKESCAPE,$(SRCDIR))/src/%.c GNUmakefile
	$(MKDIR_P) "$$(dirname $@)"
	$(KCC) $(KCFLAGS) $(KCPPFLAGS) -c '$(call SHESCAPE,$<)' -o $@

# Compilation rules for *.S files.
obj/%.S.o: $(call MKESCAPE,$(SRCDIR))/src/%.S GNUmakefile
	$(MKDIR_P) "$$(dirname $@)"
	$(KCC) $(KCFLAGS) $(KCPPFLAGS) -c '$(call SHESCAPE,$<)' -o $@

#ifeq ($(KARCH),x86_64)
## Compilation rules for *.asm files.
#obj/%.asm.o: $(call MKESCAPE,$(SRCDIR))/src/%.asm GNUmakefile
#	$(MKDIR_P) "$$(dirname $@)"
#	nasm $(KNASMFLAGS) '$(call SHESCAPE,$<)' -o $@
#endif

# Remove object files and the final executable.
.PHONY: clean
clean:
	rm -rf bin obj

# Remove files generated by configure.
.PHONY: distclean
distclean: clean
	rm -rf config.log config.status GNUmakefile toolchain-files

# Create a release tarball.
.PHONY: dist
dist:
	rm -rf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"
	$(MKDIR_P) "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"
	cp -rp '$(call SHESCAPE,$(SRCDIR))'/.git "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"/
	cd "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)" && git checkout .
	cd "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)" && ./bootstrap
	rm -rf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"/.git
	rm -rf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"/.gitignore
	rm -rf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"/.github
	rm -rf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"/autom4te.cache
	rm -rf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"/freestanding-headers/.git
	rm -rf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"/src/cc-runtime/.git
	echo "$(PACKAGE_VERSION)" >"$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"/version
	tar -cf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION).tar" "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"
	gzip < "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION).tar" > "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION).tar.gz"
	( bzip2 < "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION).tar" > "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION).tar.bz2" || rm "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION).tar.bz2" )
	( xz < "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION).tar" > "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION).tar.xz" || rm "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION).tar.xz" )
	rm "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION).tar"
	rm -rf "$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)"

# Remove ALL generated files.
.PHONY: maintainer-clean
maintainer-clean: distclean
	cd '$(call SHESCAPE,$(SRCDIR))' && rm -rf freestanding-headers src/cc-runtime src/limine.h configure build-aux *'~' autom4te.cache

# Install files and executables to the final locations.
.PHONY: install
install: all
	$(INSTALL) -d '$(call SHESCAPE,$(DESTDIR)$(datarootdir))/$(PACKAGE_TARNAME)'
	$(INSTALL_DATA) $(OUTPUT) '$(call SHESCAPE,$(DESTDIR)$(datarootdir))/$(PACKAGE_TARNAME)/'

# Install and strip executables.
.PHONY: install-strip
install-strip: install
	$(STRIP) '$(call SHESCAPE,$(DESTDIR)$(datarootdir))/$(PACKAGE_TARNAME)'/"$$(basename '$(OUTPUT)')"

# Uninstall previously installed files and executables.
.PHONY: uninstall
uninstall:
	rm -rf '$(call SHESCAPE,$(DESTDIR)$(datarootdir))/$(PACKAGE_TARNAME)'
